// <auto-generated />
using System;
using Infrastructure.Adapters.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Adapters.Postgres.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250412074454_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.BookingAggregate.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("booking", (string)null);
                });

            modelBuilder.Entity("Domain.CustomerAggregate.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Rents")
                        .HasColumnType("integer")
                        .HasColumnName("rents");

                    b.Property<int>("level_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("level_id");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("Domain.CustomerAggregate.Level", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("NeededPoints")
                        .HasColumnType("integer")
                        .HasColumnName("needed_points");

                    b.HasKey("Id");

                    b.ToTable("level", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "fickle",
                            NeededPoints = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "regular",
                            NeededPoints = 100
                        },
                        new
                        {
                            Id = 3,
                            Name = "frequent",
                            NeededPoints = 300
                        });
                });

            modelBuilder.Entity("Domain.RentAggregate.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("ActualAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("actual_amount");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.Property<int>("status_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("status_id");

                    b.ToTable("rent", (string)null);
                });

            modelBuilder.Entity("Domain.RentAggregate.Status", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "inprogress"
                        },
                        new
                        {
                            Id = 2,
                            Name = "completed"
                        });
                });

            modelBuilder.Entity("Domain.VehicleAggregate.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("VehicleModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_model_id");

                    b.HasKey("Id");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("Domain.VehicleModelAggregate.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("vehicle_model", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Adapters.Postgres.Inbox.InboxEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("EventId");

                    b.HasIndex(new[] { "OccurredOnUtc", "ProcessedOnUtc" }, "IX_inbox_messages_unprocessed")
                        .HasFilter("processed_on_utc IS NULL");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "OccurredOnUtc", "ProcessedOnUtc" }, "IX_inbox_messages_unprocessed"), new[] { "EventId", "Type" });

                    b.ToTable("inbox", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Adapters.Postgres.Outbox.OutboxEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("EventId");

                    b.HasIndex(new[] { "OccurredOnUtc", "ProcessedOnUtc" }, "IX_outbox_messages_unprocessed")
                        .HasFilter("processed_on_utc IS NULL");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex(new[] { "OccurredOnUtc", "ProcessedOnUtc" }, "IX_outbox_messages_unprocessed"), new[] { "EventId", "Type" });

                    b.ToTable("outbox", (string)null);
                });

            modelBuilder.Entity("Domain.BookingAggregate.Booking", b =>
                {
                    b.HasOne("Domain.CustomerAggregate.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_customer_id");

                    b.HasOne("Domain.VehicleAggregate.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_vehicle_id");
                });

            modelBuilder.Entity("Domain.CustomerAggregate.Customer", b =>
                {
                    b.HasOne("Domain.CustomerAggregate.Level", "Level")
                        .WithMany()
                        .HasForeignKey("level_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_level_id");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Domain.RentAggregate.Rent", b =>
                {
                    b.HasOne("Domain.BookingAggregate.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_booking_id");

                    b.HasOne("Domain.CustomerAggregate.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_customer_id");

                    b.HasOne("Domain.VehicleAggregate.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_vehicle_id");

                    b.HasOne("Domain.RentAggregate.Status", "Status")
                        .WithMany()
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_status_id");

                    b.OwnsOne("Domain.SharedKernel.ValueObjects.Tariff", "Tariff", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("PricePerDay")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("price_per_day");

                            b1.Property<decimal>("PricePerHour")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("price_per_hour");

                            b1.Property<decimal>("PricePerMinute")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("price_per_minute");

                            b1.HasKey("RentId");

                            b1.ToTable("rent");

                            b1.WithOwner()
                                .HasForeignKey("RentId");
                        });

                    b.Navigation("Status");

                    b.Navigation("Tariff")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.VehicleAggregate.Vehicle", b =>
                {
                    b.HasOne("Domain.VehicleModelAggregate.VehicleModel", null)
                        .WithMany()
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_vehicle_model_id");
                });

            modelBuilder.Entity("Domain.VehicleModelAggregate.VehicleModel", b =>
                {
                    b.OwnsOne("Domain.SharedKernel.ValueObjects.Tariff", "Tariff", b1 =>
                        {
                            b1.Property<Guid>("VehicleModelId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("PricePerDay")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("price_per_day");

                            b1.Property<decimal>("PricePerHour")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("price_per_hour");

                            b1.Property<decimal>("PricePerMinute")
                                .HasPrecision(10, 2)
                                .HasColumnType("numeric(10,2)")
                                .HasColumnName("price_per_minute");

                            b1.HasKey("VehicleModelId");

                            b1.ToTable("vehicle_model");

                            b1.WithOwner()
                                .HasForeignKey("VehicleModelId");
                        });

                    b.Navigation("Tariff")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
